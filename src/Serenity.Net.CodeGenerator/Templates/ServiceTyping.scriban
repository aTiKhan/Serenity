
namespace {{ModuleNamespace}} {
    export namespace {{ServiceClassName}} {
        export const baseUrl = '{{ServiceBaseUrl}}';

        export declare function Create(request: Serenity.SaveRequest<{{RowClassName}}>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Serenity.ServiceOptions<any>): PromiseLike<Serenity.SaveResponse>;
        export declare function Update(request: Serenity.SaveRequest<{{RowClassName}}>, onSuccess?: (response: Serenity.SaveResponse) => void, opt?: Serenity.ServiceOptions<any>): PromiseLike<Serenity.SaveResponse>;
        export declare function Delete(request: Serenity.DeleteRequest, onSuccess?: (response: Serenity.DeleteResponse) => void, opt?: Serenity.ServiceOptions<any>): PromiseLike<Serenity.DeleteResponse>;
        export declare function Retrieve(request: Serenity.RetrieveRequest, onSuccess?: (response: Serenity.RetrieveResponse<{{RowClassName}}>) => void, opt?: Serenity.ServiceOptions<any>): PromiseLike<Serenity.RetrieveResponse<{{RowClassName}}>>;
        export declare function List(request: Serenity.ListRequest, onSuccess?: (response: Serenity.ListResponse<{{RowClassName}}>) => void, opt?: Serenity.ServiceOptions<any>): PromiseLike<Serenity.ListResponse<{{RowClassName}}>>;

        export namespace Methods {
            export declare const Create: string;
            export declare const Update: string;
            export declare const Delete: string;
            export declare const Retrieve: string;
            export declare const List: string;
        }

        [
            'Create', 
            'Update', 
            'Delete', 
            'Retrieve', 
            'List'
        ].forEach(x => {
            (<any>{{ServiceClassName}})[x] = function (r, s, o) { 
                return Serenity.serviceRequest(baseUrl + '/' + x, r, s, o); 
            };
            (<any>Methods)[x] = baseUrl + '/' + x;
        });
    }
}